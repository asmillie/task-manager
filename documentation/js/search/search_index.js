var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.276,1,2.042]],["body/controllers/AppController.html",[0,2.278,1,3.645,2,1.95,3,0.404,4,0.343,5,0.343,6,4.04,7,0.466,8,0.031,9,0.993,10,0.404,11,0.073,12,0.024,13,0.028,14,0.024]],["title/modules/AppModule.html",[15,1.276,16,2.042]],["body/modules/AppModule.html",[1,3.322,2,1.852,3,0.29,4,0.246,5,0.246,7,0.592,8,0.033,9,0.712,10,0.29,11,0.052,12,0.017,13,0.023,14,0.017,15,2.076,16,4.059,17,1.664,18,1.664,19,2.013,20,2.013,21,1.664,22,2.987,23,2.013,24,2.898,25,2.898,26,2.898,27,3.399,28,3.082,29,3.082,30,3.399,31,2.665,32,2.013,33,1.825,34,3.472,35,2.963,36,2.52,37,1.664,38,2.898,39,2.52,40,2.963,41,3.472,42,3.472,43,2.898,44,3.472,45,2.898,46,3.472,47,3.472,48,3.472,49,3.472,50,2.883,51,3.472,52,3.472,53,2.898,54,2.898,55,2.898,56,2.013,57,2.898]],["title/injectables/AppService.html",[30,1.836,58,0.774]],["body/injectables/AppService.html",[3,0.404,4,0.343,5,0.343,7,0.466,8,0.031,9,0.993,10,0.404,11,0.073,12,0.024,13,0.028,14,0.024,30,3.278,58,1.383,59,2.124,60,4.04]],["title/controllers/AuthController.html",[0,1.276,61,2.042]],["body/controllers/AuthController.html",[0,1.22,2,1.22,3,0.253,4,0.215,5,0.215,7,0.463,8,0.033,9,0.622,10,0.253,11,0.046,12,0.015,13,0.021,14,0.015,61,2.702,62,2.528,63,2.199,64,2.199,65,0.375,66,1.553,67,2.269,68,5.186,69,4.329,70,3.029,71,1.688,72,3.029,73,0.94,74,3.029,75,1.439,76,4.191,77,3.499,78,1.688,79,1.839,80,3.042,81,3.499,82,2.276,83,3.499,84,3.499,85,1.688,86,3.042,87,4.329,88,4.191,89,5.186,90,1.429,91,0.86,92,0.94,93,1.115,94,4.088,95,3.509,96,3.343,97,1.769,98,3.029,99,3.029,100,3.029,101,4.191,102,4.191,103,4.191,104,4.191,105,3.499,106,2.429,107,2.199,108,2.199,109,2.528,110,2.199,111,1.22,112,2.304,113,2.199,114,3.029,115,1.756,116,0.622,117,1.839,118,3.029,119,3.499,120,3.029,121,3.029,122,1.316,123,1.688,124,3.029,125,2.199,126,3.029,127,3.029,128,1.329,129,2.528,130,3.029,131,3.029,132,2.528]],["title/modules/AuthModule.html",[15,1.276,27,1.836]],["body/modules/AuthModule.html",[2,1.843,3,0.287,4,0.245,5,0.245,7,0.597,8,0.033,9,0.707,10,0.287,11,0.052,12,0.017,13,0.023,14,0.017,15,2.069,17,1.652,18,1.652,19,1.998,20,1.998,21,1.652,22,2.977,23,1.998,27,3.646,29,3.076,31,2.652,32,1.998,33,1.812,35,2.949,38,2.877,39,2.502,40,2.949,43,2.877,61,3.31,82,1.513,111,1.388,112,2.805,113,2.502,133,2.877,134,3.447,135,2.877,136,3.392,137,3.392,138,3.447,139,2.502,140,3.447,141,3.447,142,3.447,143,2.502,144,3.447,145,3.447,146,2.502,147,2.502,148,3.447,149,3.447,150,2.877,151,3.447,152,3.447,153,3.447]],["title/injectables/AuthService.html",[58,0.774,112,1.518]],["body/injectables/AuthService.html",[3,0.17,4,0.144,5,0.144,7,0.446,8,0.033,9,0.417,10,0.17,11,0.031,12,0.01,13,0.015,14,0.01,58,0.766,59,0.893,64,2.772,65,0.252,66,1.16,67,2.174,69,2.614,73,1.038,75,1.57,78,2.174,79,2.368,80,2.273,82,2.146,83,2.614,84,2.614,85,2.39,86,2.273,90,1.463,91,0.88,92,0.962,93,1.016,95,1.311,97,1.302,105,2.614,112,1.501,116,0.643,117,2.032,122,1.199,123,1.728,128,1.882,129,4.391,143,1.477,154,1.698,155,0.906,156,2.22,157,3.113,158,3.132,159,3.132,160,3.132,161,1.374,162,1.698,163,2.146,164,5.095,165,3.132,166,0.661,167,3.132,168,2.034,169,3.132,170,2.614,171,2.614,172,3.132,173,3.132,174,3.132,175,3.132,176,3.132,177,1.319,178,2.034,179,3.132,180,2.614,181,2.772,182,2.614,183,3.132,184,2.034,185,2.461,186,2.486,187,2.273,188,1.646,189,1.179,190,1.179,191,1.715,192,3.132,193,2.772,194,2.034,195,2.684,196,1.698,197,2.034,198,2.273,199,2.007,200,2.273,201,2.034,202,2.772,203,2.034,204,2.213,205,2.772,206,2.772,207,2.772,208,2.273,209,3.132,210,2.034,211,1.698,212,2.034,213,2.034,214,1.676,215,2.273,216,2.273,217,1.698,218,2.614,219,2.034,220,3.818,221,2.034,222,2.034,223,3.132,224,2.034,225,2.034,226,1.698,227,1.815,228,2.034,229,1.477,230,2.034,231,1.698]],["title/classes/CreateTaskDto.html",[11,0.048,232,1.836]],["body/classes/CreateTaskDto.html",[3,0.27,4,0.23,5,0.23,7,0.312,8,0.032,10,0.27,11,0.066,12,0.016,13,0.022,14,0.016,56,1.88,65,0.402,71,2.006,73,1.289,90,1.498,91,0.901,92,1.197,93,1.613,97,1.106,116,1.18,122,1.018,155,1.27,156,2.387,161,1.423,166,0.859,177,1.542,232,2.546,233,1.423,234,4.907,235,2.354,236,4.979,237,3.09,238,3.666,239,3.789,240,4.391,241,2.931,242,4.391,243,4.979,244,2.707,245,3.21,246,2.707,247,2.546,248,2.707,249,3.243,250,3.243,251,3.243,252,3.243,253,2.707,254,2.831,255,1.554,256,2.09,257,4.979,258,3.243,259,3.243,260,3.243,261,3.243]],["title/classes/CreateUserDto.html",[11,0.048,262,1.836]],["body/classes/CreateUserDto.html",[3,0.279,4,0.238,5,0.238,7,0.432,8,0.032,10,0.279,11,0.068,12,0.017,13,0.022,14,0.017,65,0.415,71,2.039,73,1.264,75,1.097,78,2.271,79,2.601,85,2.039,91,1.157,92,1.213,106,2.934,116,1.306,155,1.298,166,0.868,177,1.419,186,2.602,233,1.47,246,3.747,247,3.135,254,3.263,255,1.605,256,3.741,262,2.602,263,4.845,264,2.431,265,2.661,266,2.602,267,2.796,268,3.349,269,3.747,270,3.349,271,2.796,272,3.747,273,3.258,274,3.747,275,3.349,276,3.349,277,2.796,278,3.747,279,3.747,280,2.796]],["title/injectables/JwtStrategy.html",[58,0.774,136,1.836]],["body/injectables/JwtStrategy.html",[3,0.279,4,0.237,5,0.237,7,0.559,8,0.033,9,0.686,10,0.279,11,0.05,12,0.017,13,0.022,14,0.017,40,2.888,56,1.937,58,1.096,59,1.466,65,0.414,66,1.66,67,2.037,73,1.005,75,1.491,78,1.805,82,2.472,90,1.528,91,0.92,92,1.005,93,0.889,97,1.724,111,1.346,115,1.937,116,0.686,117,1.466,122,1.049,123,1.346,128,1.466,136,2.598,150,2.789,161,1.466,162,2.789,163,2.545,166,0.69,187,3.253,188,2.355,191,1.238,193,3.67,196,2.789,199,1.756,200,2.426,214,1.466,218,4.51,227,3.132,281,2.789,282,3.342,283,4.481,284,3.342,285,2.888,286,3.741,287,4.481,288,4.481,289,3.342,290,2.789,291,2.789,292,3.342,293,2.426,294,3.342,295,2.154,296,2.789,297,2.789,298,3.342,299,3.342,300,3.342,301,3.342,302,3.342]],["title/injectables/LocalStrategy.html",[58,0.774,137,1.836]],["body/injectables/LocalStrategy.html",[3,0.283,4,0.241,5,0.241,7,0.524,8,0.032,9,0.697,10,0.283,11,0.051,12,0.017,13,0.022,14,0.017,58,1.108,59,1.491,65,0.421,66,1.679,67,2.054,73,1.016,75,1.511,77,3.782,78,2.282,79,2.611,90,1.545,91,0.93,92,1.016,93,0.904,97,1.739,111,1.369,112,2.793,113,2.466,115,1.969,116,0.697,117,1.988,122,1.067,123,1.369,128,1.491,137,2.626,161,1.491,166,0.698,170,3.782,177,1.425,186,2.626,187,3.289,188,2.382,191,1.259,193,3.701,199,1.786,200,2.466,214,1.491,286,3.782,290,2.836,291,2.836,293,2.466,295,2.19,296,2.836,297,2.836,303,2.836,304,3.397,305,3.397,306,4.531,307,3.397,308,3.397,309,2.836,310,3.397,311,3.397]],["title/injectables/MockMongooseService.html",[58,0.774,312,2.299]],["body/injectables/MockMongooseService.html",[3,0.285,4,0.242,5,0.242,7,0.492,8,0.032,9,0.701,10,0.285,11,0.051,12,0.017,13,0.022,14,0.017,37,1.636,50,2.686,53,2.85,54,2.85,55,2.85,56,1.979,57,2.85,58,1.111,59,1.498,65,0.423,66,1.684,67,2.059,73,1.222,97,1.164,116,1.197,122,1.428,123,1.375,155,1.314,156,2.797,161,2.243,166,0.7,177,0.835,188,2.389,189,1.979,190,1.979,191,1.684,195,2.635,204,1.979,214,1.498,312,3.3,313,4.737,314,2.72,315,2.85,316,5.11,317,5.11,318,5.449,319,4.546,320,3.414,321,5.449,322,1.995,323,4.546,324,4.546,325,3.3,326,3.414,327,4.546,328,3.414,329,2.85,330,3.414,331,2.85,332,2.85,333,3.414,334,3.414,335,3.414]],["title/classes/MongoExceptionFilter.html",[11,0.048,336,2.299]],["body/classes/MongoExceptionFilter.html",[3,0.346,4,0.294,5,0.294,7,0.497,8,0.032,9,0.851,10,0.346,11,0.062,12,0.02,13,0.025,14,0.02,65,0.514,66,1.909,73,0.93,90,1.415,91,0.851,92,0.93,97,1.415,166,0.639,191,1.537,195,2.988,204,3.25,214,1.821,233,1.821,253,3.464,329,3.464,332,4.302,336,3.741,337,4.302,338,4.68,339,3.464,340,5.606,341,5.154,342,5.864,343,5.606,344,5.864,345,4.149,346,4.149]],["title/interfaces/Task.html",[322,1.39,347,1.518]],["body/interfaces/Task.html",[3,0.359,4,0.305,5,0.305,7,0.414,8,0.032,10,0.359,12,0.021,13,0.026,14,0.021,65,0.533,93,1.58,116,1.169,155,1.523,166,0.877,177,1.516,237,3.121,239,3.827,241,2.994,295,3.396,314,2.061,322,2.312,347,2.061,348,2.771,349,3.589,350,4.755]],["title/classes/TaskQueryOptions.html",[11,0.048,351,1.836]],["body/classes/TaskQueryOptions.html",[3,0.322,4,0.274,5,0.274,7,0.474,8,0.032,10,0.322,11,0.074,12,0.019,13,0.024,14,0.019,65,0.478,71,1.983,73,1.216,92,1.353,116,1.286,155,1.423,166,0.835,233,1.693,245,3.495,255,1.849,322,1.693,351,2.853,352,4.146,353,3.681,354,3.22,355,4.526,356,5.421,357,4.146,358,4.767,359,3.857,360,3.857,361,3.857,362,3.857,363,3.495,364,3.857,365,3.857,366,5.421,367,4.922,368,3.857]],["title/classes/TaskSortOption.html",[11,0.048,363,2.042]],["body/classes/TaskSortOption.html",[3,0.294,4,0.25,5,0.25,7,0.339,8,0.032,10,0.294,11,0.07,12,0.017,13,0.023,14,0.017,65,0.437,71,1.87,73,1.286,90,1.202,91,0.723,92,0.79,93,0.937,122,1.458,155,1.342,156,2.822,161,1.546,166,0.8,177,1.507,233,1.546,238,3.875,255,1.689,352,4.274,357,4.274,358,4.333,363,2.992,369,2.941,370,5.191,371,5.191,372,5.734,373,5.888,374,4.642,375,4.642,376,4.642,377,3.523,378,3.523,379,3.523,380,3.523,381,3.523,382,3.523,383,3.523,384,2.941,385,2.941,386,3.523,387,5.191,388,4.642,389,4.642,390,3.523,391,3.523]],["title/controllers/TasksController.html",[0,1.276,392,2.042]],["body/controllers/TasksController.html",[0,0.725,2,0.725,3,0.15,4,0.128,5,0.128,7,0.448,8,0.033,9,0.369,10,0.15,11,0.027,12,0.009,13,0.014,14,0.009,63,1.307,65,0.223,66,1.055,67,2.373,71,1.873,73,1.042,75,1.35,86,2.067,87,3.35,90,1.585,91,0.954,92,1.132,93,1.237,94,4.383,95,3.56,96,3.56,97,1.883,107,2.563,108,1.307,110,1.307,111,0.725,115,1.044,116,0.369,117,2.49,122,1.46,123,1.873,125,1.307,128,0.79,166,0.673,177,1.27,185,1.835,227,3.517,232,3.012,237,2.298,241,1.856,285,2.587,322,2.696,351,3.012,353,1.835,392,1.835,393,1.503,394,3.534,395,2.847,396,2.847,397,2.948,398,3.531,399,2.377,400,2.948,401,1.8,402,1.8,403,1.835,404,3.863,405,1.835,406,1.8,407,2.534,408,1.8,409,2.587,410,4.214,411,4.014,412,1.8,413,2.847,414,1.8,415,2.067,416,1.8,417,1.8,418,2.377,419,2.377,420,2.377,421,2.377,422,1.503,423,2.067,424,2.377,425,2.327,426,1.8,427,2.847,428,1.8,429,1.8,430,3.085,431,2.847,432,1.8,433,1.835,434,2.587,435,3.35,436,1.503,437,1.16,438,2.377,439,1.856,440,1.503,441,1.503,442,1.503,443,1.16,444,1.8,445,1.8,446,1.503,447,1.8,448,1.8,449,1.8,450,3.531,451,1.8,452,1.8,453,1.8,454,1.8,455,1.8,456,1.8,457,1.8]],["title/modules/TasksModule.html",[15,1.276,28,1.665]],["body/modules/TasksModule.html",[2,1.993,3,0.324,4,0.276,5,0.276,7,0.583,8,0.033,9,0.798,10,0.324,11,0.059,12,0.019,13,0.024,14,0.019,15,2.192,17,1.864,18,1.864,19,2.254,20,2.254,21,1.864,22,3.155,23,2.254,28,3.178,31,2.868,32,2.254,33,2.044,35,2.507,36,2.823,37,1.864,82,1.707,91,0.798,111,1.567,139,2.823,146,2.823,147,2.823,322,1.707,392,3.508,439,3.178,440,3.246,458,3.246,459,3.246,460,3.889,461,3.889,462,3.592,463,3.889,464,3.246,465,3.246]],["title/injectables/TasksService.html",[58,0.774,439,1.665]],["body/injectables/TasksService.html",[3,0.12,4,0.103,5,0.103,7,0.428,8,0.033,9,0.296,10,0.12,11,0.022,12,0.007,13,0.012,14,0.007,37,0.692,50,0.759,58,0.583,59,0.634,65,0.179,66,0.883,67,2.272,73,1.042,75,1.402,81,1.206,90,1.516,91,0.912,92,0.997,93,1.118,97,1.433,116,0.296,117,2.28,122,1.32,123,1.693,128,1.335,155,0.689,156,1.692,157,2.562,161,1.046,166,0.685,177,1.44,182,4.141,185,2.275,188,2.608,189,0.837,190,0.837,191,1.884,195,3.067,199,2.209,202,3.051,204,2.436,205,3.051,206,3.051,207,3.051,208,3.051,214,1.844,215,3.051,216,3.051,227,3.466,229,1.73,232,2.693,237,2.052,239,2.517,241,1.599,285,2.275,314,0.692,322,2.698,351,2.876,353,0.931,394,3.903,397,1.989,399,1.989,400,1.989,403,1.536,405,1.536,407,2.436,409,1.536,410,1.989,419,1.989,420,1.989,421,1.989,422,1.206,423,2.562,424,2.946,425,2.046,430,2.876,433,1.536,434,2.517,437,0.931,438,1.989,439,1.252,441,1.206,442,3.259,443,0.931,446,1.206,466,1.206,467,2.539,468,2.383,469,3.041,470,1.444,471,2.946,472,2.383,473,2.383,474,2.383,475,1.444,476,2.383,477,1.444,478,4.825,479,2.383,480,5.639,481,1.444,482,1.444,483,1.444,484,2.383,485,2.383,486,2.383,487,1.444,488,2.383,489,1.444,490,2.383,491,1.049,492,1.206,493,1.444,494,1.444,495,1.444,496,1.989,497,1.444,498,1.989,499,3.905,500,2.383,501,1.444,502,2.383,503,1.444,504,1.444,505,2.539,506,1.206,507,1.444,508,1.444,509,1.444,510,1.444]],["title/interfaces/Token.html",[85,1.276,347,1.518]],["body/interfaces/Token.html",[3,0.378,4,0.322,5,0.322,8,0.031,10,0.378,12,0.022,13,0.027,14,0.022,65,0.562,85,2.529,92,1.22,116,1.116,155,1.573,166,0.838,177,1.534,347,2.172,348,2.921,505,5.045,511,3.783]],["title/classes/UpdateTaskDto.html",[11,0.048,430,1.836]],["body/classes/UpdateTaskDto.html",[3,0.344,4,0.293,5,0.293,7,0.397,8,0.032,10,0.344,11,0.077,12,0.02,13,0.025,14,0.02,65,0.511,71,2.069,73,1.152,92,1.312,93,1.601,116,1.259,155,1.485,166,0.791,177,1.255,233,1.81,235,2.995,237,2.939,241,2.699,244,3.444,245,3.772,247,2.977,248,3.444,254,3.31,255,1.977,256,2.659,430,2.977,512,4.668,513,3.444]],["title/classes/UpdateUserDto.html",[11,0.048,514,1.836]],["body/classes/UpdateUserDto.html",[3,0.286,4,0.243,5,0.243,7,0.331,8,0.032,10,0.286,11,0.069,12,0.017,13,0.023,14,0.017,65,0.425,71,2.064,73,1.224,75,1.115,78,2.29,79,2.617,91,1.166,92,1.358,116,1.29,155,1.319,166,0.841,177,1.429,186,2.643,233,1.505,245,3.519,247,3.165,254,3.302,255,1.644,256,3.767,264,2.49,265,2.693,266,2.643,267,2.863,269,3.806,271,2.863,272,3.806,273,3.31,274,3.806,277,2.863,278,3.806,279,3.806,513,3.806,514,2.643,515,4.744,516,3.43,517,3.43,518,3.43]],["title/interfaces/User.html",[75,0.774,347,1.518]],["body/interfaces/User.html",[3,0.316,4,0.269,5,0.269,7,0.469,8,0.032,10,0.316,12,0.019,13,0.024,14,0.019,65,0.469,75,1.189,78,2.285,79,2.489,85,2.285,91,1.164,106,3.287,116,1.253,155,1.406,166,0.94,177,1.527,265,2.981,266,3.115,295,3.135,314,1.814,347,1.814,348,2.44,350,4.486,384,4.734,385,4.734,519,3.16,520,6.003,521,3.786]],["title/controllers/UsersController.html",[0,1.276,522,2.042]],["body/controllers/UsersController.html",[0,0.784,2,0.784,3,0.162,4,0.138,5,0.297,7,0.463,8,0.033,9,0.399,10,0.162,11,0.029,12,0.01,13,0.015,14,0.01,50,1.023,63,1.412,65,0.241,66,1.121,67,2.406,71,1.935,73,1.077,75,1.506,90,1.638,91,0.986,92,1.077,93,1.278,94,4.232,95,3.677,96,3.508,97,2.006,107,1.412,108,1.412,109,1.624,110,1.412,111,0.784,115,1.128,116,0.399,117,2.275,119,1.624,122,1.574,123,1.495,125,1.412,132,1.624,156,0.932,163,1.629,166,0.572,191,1.375,199,1.023,214,0.854,262,3.005,265,2.999,403,1.95,404,3.04,405,1.95,407,1.128,409,2.699,415,2.196,425,1.754,433,1.95,434,1.95,435,2.525,436,1.624,437,1.254,443,1.254,491,2.196,514,3.155,522,1.95,523,1.624,524,1.945,525,3.025,526,2.525,527,2.525,528,3.712,529,3.025,530,2.525,531,1.945,532,3.025,533,1.945,534,1.945,535,3.025,536,1.945,537,4.009,538,5.442,539,1.945,540,3.025,541,1.945,542,1.945,543,1.945,544,1.945,545,2.525,546,3.025,547,1.945,548,3.025,549,1.945,550,1.945,551,3.025,552,1.945,553,2.525,554,1.945,555,3.025,556,1.945,557,1.624,558,1.624,559,2.525,560,1.624,561,1.945,562,1.945,563,1.945,564,1.945,565,1.945,566,1.945,567,1.945,568,1.945,569,1.945,570,1.945,571,2.525,572,1.945,573,1.945,574,1.624,575,1.945,576,1.945,577,1.624,578,1.945,579,1.945,580,1.945,581,1.945,582,1.945,583,1.945,584,1.945,585,1.945,586,1.945,587,1.945,588,1.945,589,1.945,590,1.945,591,1.945,592,3.025,593,1.624,594,1.945,595,1.945,596,1.945]],["title/modules/UsersModule.html",[15,1.276,29,1.665]],["body/modules/UsersModule.html",[2,1.914,3,0.304,4,0.259,5,0.259,7,0.583,8,0.033,9,0.749,10,0.304,11,0.055,12,0.018,13,0.023,14,0.018,15,2.127,17,1.749,18,1.749,19,2.116,20,2.116,21,1.749,22,3.061,23,3.061,28,3.125,29,3.262,31,2.753,32,2.116,33,1.918,35,3.062,36,2.649,37,1.749,45,3.047,75,0.892,82,1.602,91,0.749,111,1.47,139,2.649,146,2.649,147,2.649,163,2.784,464,3.047,465,3.047,522,3.404,560,3.047,597,3.047,598,3.65,599,3.047,600,3.047,601,3.65,602,3.65,603,3.448,604,3.65]],["title/injectables/UsersService.html",[58,0.774,163,1.39]],["body/injectables/UsersService.html",[3,0.088,4,0.075,5,0.272,7,0.409,8,0.033,9,0.217,10,0.088,11,0.016,12,0.005,13,0.009,14,0.005,33,0.556,37,0.507,50,1.272,58,0.447,59,0.464,64,1.329,65,0.131,66,0.678,67,2.32,73,1.05,75,1.532,78,1.709,79,1.934,80,1.329,82,0.803,85,2.154,90,1.553,91,0.934,92,1.021,93,1.172,96,1.18,97,1.597,106,2.458,116,0.217,117,2.15,122,1.384,123,1.886,128,1.43,155,0.529,156,1.382,157,2.094,161,0.803,163,0.803,166,0.701,171,2.408,177,1.4,180,3.381,181,1.756,185,1.18,186,1.061,188,2.811,189,0.613,190,0.613,191,2.002,195,3.189,198,1.329,199,2.521,202,3.305,204,2.639,205,3.305,206,3.199,207,3.199,208,3.079,214,2.105,215,3.305,216,3.305,217,2.408,226,3.381,227,3.066,229,0.768,231,1.528,262,2.348,265,2.746,266,1.89,280,0.883,285,1.859,314,0.507,325,0.768,394,0.768,403,1.18,404,0.768,405,1.18,407,1.672,409,2.301,415,1.329,418,2.721,423,2.094,425,1.672,433,1.18,434,1.18,437,0.682,443,0.682,467,2.02,471,2.408,478,4.168,491,1.756,492,0.883,496,1.528,498,1.528,506,1.528,514,2.943,526,1.528,527,1.528,530,1.528,537,1.528,545,1.528,553,2.408,559,1.528,571,3.679,574,0.883,577,0.883,593,0.883,605,0.883,606,1.83,607,1.83,608,1.83,609,1.83,610,1.83,611,1.83,612,1.057,613,1.83,614,1.83,615,1.83,616,1.057,617,1.83,618,1.83,619,3.569,620,1.057,621,3.26,622,1.83,623,1.057,624,1.83,625,1.057,626,1.83,627,1.057,628,1.83,629,1.057,630,1.83,631,1.057,632,1.83,633,1.057,634,1.83,635,2.42,636,1.83,637,1.83,638,3.569,639,1.057,640,1.83,641,1.83,642,1.057,643,1.83,644,1.83,645,1.057,646,1.528,647,1.057,648,1.057,649,1.057,650,1.057,651,1.057,652,1.057,653,1.83,654,1.057,655,1.057,656,1.057,657,1.83,658,1.057,659,2.884,660,2.02,661,2.884,662,1.057,663,1.83,664,1.057,665,1.057,666,1.057,667,1.057,668,1.057,669,1.057,670,1.057,671,1.057,672,1.057,673,1.057,674,1.057,675,1.83,676,1.057,677,1.83,678,1.057,679,1.057,680,1.057,681,1.83]],["title/coverage.html",[682,3.137]],["body/coverage.html",[0,2.142,1,2.071,5,0.228,6,2.682,8,0.032,11,0.088,12,0.016,13,0.022,14,0.016,21,1.54,30,1.863,58,1.434,60,2.682,61,2.071,62,2.682,75,0.786,85,1.295,112,1.54,136,1.863,137,1.863,154,2.682,163,1.41,166,0.495,191,1.19,232,1.863,234,2.682,235,3.168,262,1.863,263,2.682,264,3.168,281,2.682,303,2.682,312,2.333,313,2.682,314,1.54,315,2.682,322,1.41,336,2.333,337,2.682,338,2.682,339,2.682,347,2.376,349,2.682,351,1.863,352,3.168,353,2.071,354,2.682,357,2.333,363,2.071,369,2.682,392,2.071,393,2.682,430,1.863,439,1.689,462,2.333,466,2.682,511,2.682,512,2.682,514,1.863,515,2.682,519,2.682,522,2.071,523,2.682,603,2.333,605,2.682,682,2.333,683,3.213,684,3.213,685,3.213,686,6.357,687,5.559,688,4.365,689,3.213,690,3.213,691,3.213,692,4.365,693,4.365,694,2.682,695,2.682,696,3.213,697,4.956,698,4.956,699,4.365,700,2.682,701,4.365,702,4.365,703,4.365,704,3.213,705,3.213,706,3.213,707,2.682,708,3.213,709,3.213,710,3.213,711,3.213]],["title/dependencies.html",[18,1.826,712,2.645]],["body/dependencies.html",[8,0.033,9,0.834,11,0.077,12,0.02,13,0.025,14,0.02,18,1.949,37,1.949,39,2.952,40,2.621,82,1.784,111,1.638,143,2.952,198,2.952,255,1.949,293,4.033,309,3.394,314,1.949,355,3.394,557,3.394,558,4.248,646,3.394,713,5.555,714,4.066,715,4.066,716,5.089,717,4.066,718,4.066,719,4.066,720,4.066,721,4.066,722,4.066,723,4.066,724,4.066,725,4.066,726,4.066,727,4.066,728,4.066,729,4.066,730,4.066,731,4.066,732,4.066,733,4.066,734,4.066,735,4.066,736,4.066,737,4.066,738,4.066]],["title/miscellaneous/functions.html",[739,1.705,740,3.18]],["body/miscellaneous/functions.html",[8,0.028,12,0.025,13,0.028,14,0.025,21,2.904,65,0.616,694,4.153,739,3.207,740,4.153,741,4.975]],["title/index.html",[65,0.328,742,2.645,743,2.645]],["body/index.html",[4,0.271,8,0.032,12,0.019,13,0.024,14,0.019,93,1.015,325,3.549,331,3.185,682,2.77,744,3.816,745,3.816,746,4.889,747,3.816,748,3.816,749,3.816,750,3.816,751,3.816,752,3.816,753,3.816,754,3.816,755,5.394,756,3.816,757,3.816,758,3.816,759,3.816,760,6.117,761,3.816,762,3.816,763,3.816,764,6.016,765,3.816,766,3.816,767,4.889,768,3.816,769,3.816,770,3.816,771,3.816,772,4.889,773,3.816,774,3.816,775,3.816,776,4.889,777,4.889,778,3.816,779,3.816,780,3.816,781,3.816,782,3.816,783,3.185,784,3.816,785,3.816,786,3.816,787,3.816,788,3.816,789,3.816,790,3.816,791,3.816,792,3.816,793,3.816,794,3.816,795,3.816,796,3.816,797,3.816,798,3.816,799,3.816,800,3.816,801,3.816]],["title/modules.html",[17,2.071]],["body/modules.html",[8,0.028,12,0.024,13,0.028,14,0.024,16,3.068,17,2.281,27,2.759,28,2.502,29,2.502,783,5.127,802,6.142,803,6.142,804,6.142]],["title/overview.html",[805,3.607]],["body/overview.html",[2,1.509,8,0.032,12,0.019,13,0.024,14,0.019,15,1.509,16,4.053,17,1.795,18,1.795,19,2.171,20,2.171,21,1.795,22,2.171,23,2.171,24,3.127,25,3.127,26,3.127,27,3.67,28,3.147,29,3.277,30,3.099,31,2.8,32,2.171,33,1.969,59,1.644,112,2.563,133,3.127,135,3.127,136,3.099,137,3.099,163,2.673,233,1.644,273,3.506,348,2.414,439,2.81,458,3.127,459,3.127,597,3.127,599,3.127,600,3.127,805,3.127,806,4.831,807,3.746]],["title/miscellaneous/variables.html",[739,1.705,808,3.18]],["body/miscellaneous/variables.html",[8,0.033,12,0.018,13,0.023,14,0.018,50,3.289,56,2.11,65,0.451,75,1.289,78,1.467,79,1.598,85,1.467,91,0.747,93,0.969,106,2.11,122,1.143,128,1.598,166,0.945,177,1.417,181,2.643,189,3.057,190,2.749,191,1.757,211,3.039,237,1.913,239,2.347,241,1.913,247,3.057,265,1.913,266,2.11,407,3.057,425,2.11,462,3.442,603,3.442,660,3.039,695,3.039,700,3.039,707,3.039,739,2.347,808,3.039,809,3.64,810,3.64,811,4.742,812,3.64,813,3.64,814,5.588,815,4.742,816,3.64,817,3.64,818,3.64,819,3.64,820,3.64]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["0.0.7",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0.11.0",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["0.24.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":387,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["1.0.0",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["10/13",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["1000000",{"_index":565,"title":{},"body":{"controllers/UsersController.html":{}}}],["2/3",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["3",{"_index":807,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["3.0.8",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["3.2.5",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["3.21.3",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["3/6",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":806,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["5.8.11",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["6.1.1",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["6.11.6",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["6.3.1",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["6/7",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["76",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["85",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["_direction",{"_index":370,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["_field",{"_index":371,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["_id",{"_index":505,"title":{},"body":{"injectables/TasksService.html":{},"interfaces/Token.html":{}}}],["_owner",{"_index":236,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["accessors",{"_index":238,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskSortOption.html":{}}}],["account",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar",{"_index":606,"title":{},"body":{"injectables/UsersService.html":{}}}],["addavatar(userid",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["address",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["addtoken",{"_index":607,"title":{},"body":{"injectables/UsersService.html":{}}}],["addtoken(user",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["admin",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["along",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["already",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["amazing",{"_index":784,"title":{},"body":{"index.html":{}}}],["angular",{"_index":754,"title":{},"body":{"index.html":{}}}],["api",{"_index":324,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["app",{"_index":762,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":751,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":16,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":30,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":344,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["async",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["auth_token",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["authcontroller",{"_index":61,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticating",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["authentication",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authguard",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":27,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":794,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":112,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["avatar",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["avatar.buffer",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["await",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":785,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":491,"title":{},"body":{"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('missing",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('user",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["based",{"_index":484,"title":{},"body":{"injectables/TasksService.html":{}}}],["bcrypt",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(password",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["before",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["being",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["belonging",{"_index":410,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["body",{"_index":435,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":241,"title":{},"body":{"classes/CreateTaskDto.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":804,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":802,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["building",{"_index":747,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["catch",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":341,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["catch(mongoerror",{"_index":346,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["cb",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{}}}],["cb(new",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["cb(undefined",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["characters",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["class",{"_index":11,"title":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":233,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["classes/task",{"_index":441,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["cluster_appmodule",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":458,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_providers",{"_index":459,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":597,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":599,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":598,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":600,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["completed",{"_index":237,"title":{},"body":{"classes/CreateTaskDto.html":{},"interfaces/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"miscellaneous/variables.html":{}}}],["completion",{"_index":420,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["conditions",{"_index":499,"title":{},"body":{"injectables/TasksService.html":{}}}],["config",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["config.get('database.uri",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('jwt.expiresin",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["config.get('jwt.secret",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["const",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/TaskSortOption.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":304,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(field",{"_index":374,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["constructor(owner",{"_index":240,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["constructor(private",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["constructor(taskmodel",{"_index":470,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(usermodel",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["contained",{"_index":287,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["containing",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":444,"title":{},"body":{"controllers/TasksController.html":{}}}],["controller('users",{"_index":561,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":682,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":467,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["create(createtaskdto",{"_index":474,"title":{},"body":{"injectables/TasksService.html":{}}}],["create(createuserdto",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["created",{"_index":405,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createdat",{"_index":384,"title":{},"body":{"classes/TaskSortOption.html":{},"interfaces/User.html":{}}}],["createmongooseoptions",{"_index":318,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["creates",{"_index":403,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createtask",{"_index":395,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(@req",{"_index":445,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtask(req",{"_index":401,"title":{},"body":{"controllers/TasksController.html":{}}}],["createtaskdto",{"_index":232,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["createtaskdto.owner",{"_index":446,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createuserdto",{"_index":262,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TasksService.html":{}}}],["credentials",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{}}}],["criteria",{"_index":424,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["current",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["currently",{"_index":411,"title":{},"body":{"controllers/TasksController.html":{}}}],["database",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":520,"title":{},"body":{"interfaces/User.html":{}}}],["db",{"_index":316,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["db_name",{"_index":317,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["defined",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":407,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["delete(':id",{"_index":413,"title":{},"body":{"controllers/TasksController.html":{}}}],["delete('me",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('me/avatar",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletealltasksbyuserid",{"_index":468,"title":{},"body":{"injectables/TasksService.html":{}}}],["deletealltasksbyuserid(userid",{"_index":476,"title":{},"body":{"injectables/TasksService.html":{}}}],["deleteallusertasks",{"_index":396,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleteallusertasks(@req",{"_index":456,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleteallusertasks(req",{"_index":406,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleteavatar",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(@request",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatar(req",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteavatarbyuserid",{"_index":608,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteavatarbyuserid(userid",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleted",{"_index":415,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletes",{"_index":409,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletetask",{"_index":397,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(req",{"_index":412,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask(userid",{"_index":479,"title":{},"body":{"injectables/TasksService.html":{}}}],["deleteuser",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@request",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(req",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(userid",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleting",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["deletion",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":18,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":391,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["description",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Task.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["details",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["development",{"_index":763,"title":{},"body":{"index.html":{}}}],["development.env",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["direction",{"_index":373,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["direction.tolowercase",{"_index":390,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["document",{"_index":350,"title":{},"body":{"interfaces/Task.html":{},"interfaces/User.html":{}}}],["documentation",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":496,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":437,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":443,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["during",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["e",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["e.stack",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":773,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":748,"title":{},"body":{"index.html":{}}}],["email",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["empty",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["envfilepath",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["error('avatar",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["exception",{"_index":338,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["exceptionfilter",{"_index":340,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["expiresin",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Task.html":{},"interfaces/User.html":{}}}],["extracted",{"_index":288,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":292,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["false",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/MockMongooseService.html":{},"miscellaneous/variables.html":{}}}],["field",{"_index":372,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["fields",{"_index":425,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.originalname.match(/\\.(jpg|png|jpeg",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["filefilter(req",{"_index":566,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileinterceptor",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["filesize",{"_index":564,"title":{},"body":{"controllers/UsersController.html":{}}}],["filter",{"_index":419,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.ts",{"_index":339,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["filter.ts:6",{"_index":345,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["find",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["findalltasks",{"_index":398,"title":{},"body":{"controllers/TasksController.html":{}}}],["findalltasks(req",{"_index":416,"title":{},"body":{"controllers/TasksController.html":{}}}],["findalltasksbyuserid",{"_index":469,"title":{},"body":{"injectables/TasksService.html":{}}}],["findalltasksbyuserid(userid",{"_index":482,"title":{},"body":{"injectables/TasksService.html":{}}}],["finding",{"_index":498,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":285,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["findtask",{"_index":399,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findtask(@req",{"_index":449,"title":{},"body":{"controllers/TasksController.html":{}}}],["findtask(req",{"_index":426,"title":{},"body":{"controllers/TasksController.html":{}}}],["findtask(userid",{"_index":486,"title":{},"body":{"injectables/TasksService.html":{}}}],["finduserbyemail",{"_index":609,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["finduserbyid(@request",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(req",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["finduserbyid(userid",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["found",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["framework",{"_index":746,"title":{},"body":{"index.html":{}}}],["function",{"_index":695,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":740,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":427,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('me",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["getdirection",{"_index":380,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["getfield",{"_index":378,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["getowner",{"_index":249,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["getting",{"_index":742,"title":{"index.html":{}},"body":{}}],["grow",{"_index":780,"title":{},"body":{"index.html":{}}}],["hash",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashed",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashing",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":610,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":752,"title":{},"body":{"index.html":{}}}],["height",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["helmet",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":791,"title":{},"body":{"index.html":{}}}],["host",{"_index":343,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["httpcode",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["httpcode(200",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["https://nestjs.com",{"_index":798,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":308,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["id",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["implements",{"_index":332,"title":{},"body":{"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":65,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["inject",{"_index":289,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":58,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":492,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('task",{"_index":494,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectmodel('user",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["inspired",{"_index":753,"title":{},"body":{"index.html":{}}}],["installation",{"_index":759,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":761,"title":{},"body":{"index.html":{}}}],["interface",{"_index":347,"title":{"interfaces/Task.html":{},"interfaces/Token.html":{},"interfaces/User.html":{}},"body":{"interfaces/Task.html":{},"interfaces/Token.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":348,"title":{},"body":{"interfaces/Task.html":{},"interfaces/Token.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interfaces/task.interface",{"_index":493,"title":{},"body":{"injectables/TasksService.html":{}}}],["interfaces/token.interface",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["interfaces/user.interface",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["internalservererrorexception",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["isboolean",{"_index":365,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["isemail",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isempty",{"_index":243,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["isglobal",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":382,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["isin(['completed",{"_index":383,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["isin([1",{"_index":386,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["isin(undefined",{"_index":376,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["isint",{"_index":366,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["islowercase",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["islowercase()@isemail",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty",{"_index":254,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["isnotempty({message",{"_index":246,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":245,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/TaskQueryOptions.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional()@isint",{"_index":361,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["isoptional()@isint()@ispositive",{"_index":359,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["isoptional()@islowercase()@isemail",{"_index":517,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isnotempty({message",{"_index":513,"title":{},"body":{"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["ispositive",{"_index":367,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["join",{"_index":787,"title":{},"body":{"index.html":{}}}],["jpeg",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["jpg",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["json",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["json.stringify(conditions",{"_index":502,"title":{},"body":{"injectables/TasksService.html":{}}}],["json.stringify(createtaskdto",{"_index":497,"title":{},"body":{"injectables/TasksService.html":{}}}],["json.stringify(createuserdto",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(options",{"_index":503,"title":{},"body":{"injectables/TasksService.html":{}}}],["json.stringify(payload",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(updatetaskdto",{"_index":508,"title":{},"body":{"injectables/TasksService.html":{}}}],["json.stringify(updateuserdto",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["json.stringify(user",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["json.stringify(usertokens",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["jwt",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":136,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":795,"title":{},"body":{"index.html":{}}}],["legend",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["level",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["license",{"_index":801,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":777,"title":{},"body":{"index.html":{}}}],["limit",{"_index":355,"title":{},"body":{"classes/TaskQueryOptions.html":{},"dependencies.html":{}}}],["limits",{"_index":563,"title":{},"body":{"controllers/UsersController.html":{}}}],["list",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["local",{"_index":309,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":137,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["logged",{"_index":404,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["logger",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('tasksservice",{"_index":490,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger('usersservice",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuser",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuser(user",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@request",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(req",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["logoutuser",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["logoutuser(authtoken",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["manager",{"_index":323,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["match",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["matches",{"_index":286,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["matching",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["memory",{"_index":330,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["message",{"_index":256,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{}}}],["metadata",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["method('tojson",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methods",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(7",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":739,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["mit",{"_index":776,"title":{},"body":{"index.html":{}}}],["mockmongooseservice",{"_index":312,"title":{"injectables/MockMongooseService.html":{}},"body":{"injectables/MockMongooseService.html":{},"coverage.html":{}}}],["mode",{"_index":767,"title":{},"body":{"index.html":{}}}],["model",{"_index":471,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":15,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":17,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongodb",{"_index":329,"title":{},"body":{"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{}}}],["mongoerror",{"_index":342,"title":{},"body":{"classes/MongoExceptionFilter.html":{}}}],["mongoexceptionfilter",{"_index":336,"title":{"classes/MongoExceptionFilter.html":{}},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["mongomemoryserver",{"_index":321,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["mongoose",{"_index":314,"title":{},"body":{"injectables/MockMongooseService.html":{},"interfaces/Task.html":{},"injectables/TasksService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["mongoose.schema",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.schema.types.objectid",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoosemodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":464,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoosemoduleoptions",{"_index":328,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["mongooseoptionsfactory",{"_index":327,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["more",{"_index":790,"title":{},"body":{"index.html":{}}}],["multeroptions",{"_index":562,"title":{},"body":{"controllers/UsersController.html":{}}}],["myśliwiec",{"_index":796,"title":{},"body":{"index.html":{}}}],["name",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":755,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":800,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newtoken",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":745,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["npm",{"_index":760,"title":{},"body":{"index.html":{}}}],["null",{"_index":500,"title":{},"body":{"injectables/TasksService.html":{}}}],["number",{"_index":358,"title":{},"body":{"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{}}}],["object",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["occurs",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["open",{"_index":778,"title":{},"body":{"index.html":{}}}],["option",{"_index":368,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["option.ts",{"_index":369,"title":{},"body":{"classes/TaskSortOption.html":{},"coverage.html":{}}}],["option.ts:15",{"_index":379,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["option.ts:19",{"_index":381,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["option.ts:5",{"_index":377,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["option.ts:8",{"_index":375,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["optional",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":442,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["options.ts",{"_index":354,"title":{},"body":{"classes/TaskQueryOptions.html":{},"coverage.html":{}}}],["options.ts:12",{"_index":362,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["options.ts:14",{"_index":364,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["options.ts:8",{"_index":360,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["out",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["overview",{"_index":805,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":418,"title":{},"body":{"controllers/TasksController.html":{},"injectables/UsersService.html":{}}}],["owner",{"_index":239,"title":{},"body":{"classes/CreateTaskDto.html":{},"interfaces/Task.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["owner(owner",{"_index":261,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["owns",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["package",{"_index":712,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('id",{"_index":450,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MongoExceptionFilter.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["passport",{"_index":293,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport/jwt.strategy",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["passport/local.strategy",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":290,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordmatch",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["patch",{"_index":436,"title":{},"body":{"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":431,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('me",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["please",{"_index":788,"title":{},"body":{"index.html":{}}}],["png",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["post",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('me/avatar",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('me/avatar')@httpcode(200)@useinterceptors(undefined",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('signup",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/MockMongooseService.html":{},"classes/TaskSortOption.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":769,"title":{},"body":{"index.html":{}}}],["profile",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["progressive",{"_index":744,"title":{},"body":{"index.html":{}}}],["project",{"_index":779,"title":{},"body":{"index.html":{}}}],["promise",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/MockMongooseService.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{}}}],["provided",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["providers",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["query",{"_index":353,"title":{},"body":{"classes/TaskQueryOptions.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["query('completed",{"_index":452,"title":{},"body":{"controllers/TasksController.html":{}}}],["rate",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["read",{"_index":789,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ref",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["removed",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["removes",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["removetoken",{"_index":611,"title":{},"body":{"injectables/UsersService.html":{}}}],["removetoken(user",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["removing",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["repository",{"_index":758,"title":{},"body":{"index.html":{}}}],["req",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["req.headers.authorization.replace('bearer",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["req.user._id",{"_index":447,"title":{},"body":{"controllers/TasksController.html":{}}}],["request",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["required",{"_index":247,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resize",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["resizes",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["resizing",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["response",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["restrict",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["result",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["returns",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":764,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["saveavatar",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["saveavatar(req",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["saved",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["saves",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["saving",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["scalable",{"_index":749,"title":{},"body":{"index.html":{}}}],["schema",{"_index":465,"title":{},"body":{"modules/TasksModule.html":{},"modules/UsersModule.html":{}}}],["schemas/task.schema",{"_index":463,"title":{},"body":{"modules/TasksModule.html":{}}}],["schemas/user.schema",{"_index":604,"title":{},"body":{"modules/UsersModule.html":{}}}],["search",{"_index":423,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sensitive",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":331,"title":{},"body":{"injectables/MockMongooseService.html":{},"index.html":{}}}],["service.ts",{"_index":315,"title":{},"body":{"injectables/MockMongooseService.html":{},"coverage.html":{}}}],["service.ts:15",{"_index":320,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["service.ts:8",{"_index":326,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["service.ts:9",{"_index":319,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["set",{"_index":260,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["setowner(owner",{"_index":251,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["sharp",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["sharp(file",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":750,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup(@body",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup(createuserdto",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["skip",{"_index":356,"title":{},"body":{"classes/TaskQueryOptions.html":{}}}],["sort",{"_index":357,"title":{},"body":{"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"coverage.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":782,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task.schema.ts",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:18",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:50",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:77",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/passport/jwt.strategy.ts",{"_index":281,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/jwt.strategy.ts:23",{"_index":284,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/jwt.strategy.ts:9",{"_index":282,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/passport/local.strategy.ts",{"_index":303,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/passport/local.strategy.ts:20",{"_index":307,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/passport/local.strategy.ts:7",{"_index":305,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/main.ts",{"_index":694,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/mongo",{"_index":337,"title":{},"body":{"classes/MongoExceptionFilter.html":{},"coverage.html":{}}}],["src/tasks/classes/task",{"_index":352,"title":{},"body":{"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"coverage.html":{}}}],["src/tasks/dto/create",{"_index":234,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":512,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/interfaces/task.interface.ts",{"_index":349,"title":{},"body":{"interfaces/Task.html":{},"coverage.html":{}}}],["src/tasks/schemas/task.schema.ts",{"_index":700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":393,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:21",{"_index":402,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:32",{"_index":428,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:44",{"_index":417,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:58",{"_index":432,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:72",{"_index":414,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:83",{"_index":408,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":460,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":466,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:100",{"_index":489,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":472,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:123",{"_index":481,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:145",{"_index":477,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:22",{"_index":475,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:44",{"_index":483,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:78",{"_index":487,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/users/dto/create",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":515,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/interfaces/token.interface.ts",{"_index":511,"title":{},"body":{"interfaces/Token.html":{},"coverage.html":{}}}],["src/users/interfaces/user.interface",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":519,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:32",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:42",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:89",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":601,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":605,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:114",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:137",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:14",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:159",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:179",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:215",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:79",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:96",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":765,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":768,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":770,"title":{},"body":{"index.html":{}}}],["started",{"_index":743,"title":{"index.html":{}},"body":{}}],["starter",{"_index":757,"title":{},"body":{"index.html":{}}}],["statements",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":421,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["stay",{"_index":792,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":291,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"interfaces/Task.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["submitted",{"_index":485,"title":{},"body":{"injectables/TasksService.html":{}}}],["super",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":783,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":803,"title":{},"body":{"modules.html":{}}}],["table",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["task",{"_index":322,"title":{"interfaces/Task.html":{}},"body":{"injectables/MockMongooseService.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["task.dto",{"_index":438,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":235,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:12",{"_index":242,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:20",{"_index":250,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:24",{"_index":252,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:6",{"_index":244,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts:9",{"_index":248,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{}}}],["taskid",{"_index":480,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskmodel",{"_index":473,"title":{},"body":{"injectables/TasksService.html":{}}}],["taskqueryoptions",{"_index":351,"title":{"classes/TaskQueryOptions.html":{}},"body":{"classes/TaskQueryOptions.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":394,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["tasks.controller",{"_index":461,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":440,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["taskschema",{"_index":462,"title":{},"body":{"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskscontroller",{"_index":392,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":28,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksortoption",{"_index":363,"title":{"classes/TaskSortOption.html":{}},"body":{"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"coverage.html":{}}}],["tasksservice",{"_index":439,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":325,"title":{},"body":{"injectables/MockMongooseService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["test/mocks/mock",{"_index":313,"title":{},"body":{"injectables/MockMongooseService.html":{},"coverage.html":{}}}],["test:covsupport",{"_index":775,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":774,"title":{},"body":{"index.html":{}}}],["tests",{"_index":772,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":781,"title":{},"body":{"index.html":{}}}],["this._direction",{"_index":389,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["this._field",{"_index":388,"title":{},"body":{"classes/TaskSortOption.html":{}}}],["this._owner",{"_index":257,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["this.authservice.loginuser(req.user",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logoutuser(authtoken",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":311,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.completed",{"_index":259,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["this.db",{"_index":333,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["this.db.geturi(this.db_name).then(uri",{"_index":334,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["this.description",{"_index":258,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["this.hashpassword(createuserdto.password",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["this.logger.error(`failed",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.multeroptions",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.taskmodel.create",{"_index":495,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.deletemany",{"_index":510,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.find(conditions",{"_index":501,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findone",{"_index":504,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findoneanddelete(conditions",{"_index":509,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskmodel.findoneandupdate(conditions",{"_index":507,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.create(createtaskdto",{"_index":448,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletealltasksbyuserid(req.user._id",{"_index":457,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetask(req.user._id",{"_index":455,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findalltasksbyuserid(req.user._id",{"_index":453,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findtask(req.user._id",{"_index":451,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetask(req.user._id",{"_index":454,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.toobject",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.updateuser(userid",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidanddelete(userid",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(user._id",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(userid",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar(req.user._id",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addtoken(user",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteavatarbyuserid(req.user._id",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(req.user._id",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(payload.sub",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.removetoken(user",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(req.user._id",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["timestamps",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tobuffer",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["todo",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":85,"title":{"interfaces/Token.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Token.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token.interface",{"_index":521,"title":{},"body":{"interfaces/User.html":{}}}],["token.token",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["tokens",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["tokentoremove",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":793,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":799,"title":{},"body":{"index.html":{}}}],["type",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MockMongooseService.html":{},"classes/MongoExceptionFilter.html":{},"interfaces/Task.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"interfaces/Token.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":756,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["unique",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unit",{"_index":771,"title":{},"body":{"index.html":{}}}],["update",{"_index":434,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updated",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatedat",{"_index":385,"title":{},"body":{"classes/TaskSortOption.html":{},"interfaces/User.html":{}}}],["updateduser",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["updates",{"_index":433,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatetask",{"_index":400,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetask(req",{"_index":429,"title":{},"body":{"controllers/TasksController.html":{}}}],["updatetask(userid",{"_index":488,"title":{},"body":{"injectables/TasksService.html":{}}}],["updatetaskdto",{"_index":430,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(@request",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(req",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuser(userid",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":514,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":506,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["uploaded",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["uri",{"_index":335,"title":{},"body":{"injectables/MockMongooseService.html":{}}}],["use",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["usecreateindex",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{}}}],["usefindandmodify",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{}}}],["useguards",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@httpcode(200)@post('login",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(undefined)@httpcode(200)@post('logout",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(fileinterceptor('avatar",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["usenewurlparser",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{}}}],["user",{"_index":75,"title":{"interfaces/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateUserDto.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["user._id",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.avatar",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user.dto",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:11",{"_index":518,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:16",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":516,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:6",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["user.tojson",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.tokens",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["user.tokens.filter(token",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":478,"title":{},"body":{"injectables/TasksService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":310,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":602,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/interfaces/user.interface",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userschema",{"_index":603,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":522,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":29,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":163,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertokens",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["usertokens.push",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["useunifiedtopology",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/MockMongooseService.html":{}}}],["valid",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["validate",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":306,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":283,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":255,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/CreateUserDto.html":{},"classes/TaskQueryOptions.html":{},"classes/TaskSortOption.html":{},"classes/UpdateTaskDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MockMongooseService.html":{},"injectables/TasksService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":808,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifying",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{}}}],["void",{"_index":253,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/MongoExceptionFilter.html":{}}}],["watch",{"_index":766,"title":{},"body":{"index.html":{}}}],["web",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["website",{"_index":797,"title":{},"body":{"index.html":{}}}],["width",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["yes",{"_index":422,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["you'd",{"_index":786,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule } from '@nestjs/config';\nimport * as config from 'config';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TasksModule } from './tasks/tasks.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: 'development.env',\n      isGlobal: true,\n    }),\n    MongooseModule.forRoot(\n      config.get('database.uri'), {\n      useNewUrlParser: true,\n      useCreateIndex: true,\n      useFindAndModify: false,\n      useUnifiedTopology: true,\n    }),\n    AuthModule,\n    UsersModule,\n    TasksModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@HttpCode(200)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:18\n                \n            \n\n\n            \n                \n                    Login a user by verifying credentials (email and password)\nbefore creating a JWT (JSON Web Token) which is returned\nin the response along with user details.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@HttpCode(200)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:31\n                \n            \n\n\n            \n                \n                    Logout an authenticated user by removing the current\nJWT from the user's saved tokens. Returns user details\nin the response.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, HttpCode } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService: AuthService) {}\n\n    /**\n     * Login a user by verifying credentials (email and password)\n     * before creating a JWT (JSON Web Token) which is returned\n     * in the response along with user details.\n     * @param req Request object\n     */\n    @UseGuards(AuthGuard('local'))\n    @HttpCode(200)\n    @Post('login')\n    async login(@Request() req) {\n        return await this.authService.loginUser(req.user);\n    }\n\n    /**\n     * Logout an authenticated user by removing the current\n     * JWT from the user's saved tokens. Returns user details\n     * in the response.\n     * @param req Request object\n     */\n    @UseGuards(AuthGuard())\n    @HttpCode(200)\n    @Post('logout')\n    async logout(@Request() req) {\n        const authToken = req.headers.authorization.replace('Bearer ', '');\n        return await this.authService.logoutUser(authToken, req.user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './passport/jwt.strategy';\nimport { ConfigService, ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { LocalStrategy } from './passport/local.strategy';\nimport * as config from 'config';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: config.get('jwt.secret'),\n      signOptions: {\n        expiresIn: config.get('jwt.expiresIn'),\n      },\n    }),\n  ],\n  providers: [\n    AuthService,\n    JwtStrategy,\n    LocalStrategy,\n  ],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                loginUser\n                            \n                            \n                                    Async\n                                logoutUser\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            loginUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loginUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:50\n                \n            \n\n\n            \n                \n                    Generates a JWT (JSON Web Token) for the provided user.\nToken is saved to the user before being returned for use in\nauthenticating requests.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to generate a JWT for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logoutUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logoutUser(authToken: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:77\n                \n            \n\n\n            \n                \n                    Removes authentication token (JWT) from user to 'logout'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Token to remove\n\n                                    \n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User that owns token\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n                    Find user by email address and validate password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User email address\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('AuthService')\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, NotFoundException, Logger, InternalServerErrorException } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { User } from '../users/interfaces/user.interface';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n\n    private logger = new Logger('AuthService');\n\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly jwtService: JwtService) {}\n\n    /**\n     * Find user by email address and validate password\n     * @param email User email address\n     * @param password User password\n     * @throws {UnauthorizedException} if user is not found or password does not match\n     */\n    async validateUser(email: string, password: string): Promise {\n        let user;\n        try {\n            user = await this.usersService.findUserByEmail(email);\n        } catch (e) {\n            this.logger.error(\n                `Failed to find user for email ${email}.`,\n                e.stack,\n            );\n        }\n\n        if (user) {\n            const passwordMatch = await bcrypt.compare(password, user.password);\n            if (passwordMatch) {\n                return user.toJSON();\n            }\n        }\n        // User not found, unauthorized request\n        throw new UnauthorizedException();\n    }\n\n    /**\n     * Generates a JWT (JSON Web Token) for the provided user.\n     * Token is saved to the user before being returned for use in\n     * authenticating requests.\n     * @param user User to generate a JWT for\n     * @throws {InternalServerErrorException} if an error occurs while saving user token\n     */\n    async loginUser(user: User) {\n        const payload = {\n            sub: user._id,\n            email: user.email,\n        };\n\n        const authToken = this.jwtService.sign(payload);\n        try {\n            const updatedUser = await this.usersService.addToken(user, authToken);\n            return {\n                auth_token: authToken,\n                updatedUser,\n            };\n        } catch (e) {\n            this.logger.error(\n                `Failed to save token for user id ${user._id}. Payload: ${JSON.stringify(payload)}, Auth Token: ${authToken}`,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Removes authentication token (JWT) from user to 'logout'\n     * @param authToken Token to remove\n     * @param user User that owns token\n     * @throws {InternalServerErrorException} if an error occurs while deleting user token\n     */\n    async logoutUser(authToken: string, user: User) {\n        try {\n            return await this.usersService.removeToken(user, authToken);\n        } catch (e) {\n            this.logger.error(\n                `Failed to remove auth token from user id ${user._id}. User: ${JSON.stringify(user)}, Auth Token: ${authToken}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _owner\n                            \n                            \n                                    Readonly\n                                    Optional\n                                completed\n                            \n                            \n                                    Readonly\n                                description\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    owner\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(owner: string, description: string, completed: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/dto/create-task.dto.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        owner\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        description\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        completed\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _owner\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            completed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'Description is required'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/create-task.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        owner\n                    \n                \n\n                \n                    \n                        getowner()\n                    \n                \n                            \n                                \n                                    Defined in src/tasks/dto/create-task.dto.ts:20\n                                \n                            \n\n                \n                    \n                        setowner(owner: string)\n                    \n                \n                            \n                                \n                                    Defined in src/tasks/dto/create-task.dto.ts:24\n                                \n                            \n                    \n                        \n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            owner\n                                                    \n                                                            \n                                                                            string\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsEmpty } from 'class-validator';\n\nexport class CreateTaskDto {\n\n    @IsEmpty()\n    private _owner: string;\n\n    @IsNotEmpty({ message: 'Description is required' })\n    readonly description: string;\n\n    @IsOptional()\n    readonly completed?: boolean;\n\n    constructor(owner: string = '', description: string, completed: boolean = false) {\n        this._owner = owner;\n        this.description = description;\n        this.completed = completed;\n    }\n\n    get owner(): string {\n        return this._owner;\n    }\n\n    set owner(owner: string) {\n        this._owner = owner;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                avatar\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                name\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                    Optional\n                                tokens\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsLowercase()@IsEmail({}, {message: 'Must be a valid email address'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'User name is required'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty({message: 'Password is required '})@MinLength(7, {message: 'Password must be at least 7 characters'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            tokens\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Token[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, IsEmail, IsLowercase } from 'class-validator';\nimport { Token } from '../interfaces/token.interface';\n\nexport class CreateUserDto {\n    @IsNotEmpty({ message: 'User name is required' })\n    readonly name: string;\n\n    @IsNotEmpty({ message: 'Password is required '})\n    @MinLength(7, { message: 'Password must be at least 7 characters' })\n    readonly password: string;\n\n    @IsLowercase()\n    @IsEmail({}, { message: 'Must be a valid email address' })\n    readonly email: string;\n\n    readonly avatar?: Buffer;\n    readonly tokens?: Token[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n                    Finds and returns user that matches id contained in JWT payload.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User email and id extracted from JWT\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { UsersService } from '../../users/users.service';\nimport { User } from 'src/users/interfaces/user.interface';\nimport * as config from 'config';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly usersService: UsersService) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: config.get('jwt.secret'),\n        });\n    }\n\n    /**\n     * Finds and returns user that matches id contained in JWT payload.\n     * @param payload User email and id extracted from JWT\n     * @throws {UnauthorizedException} if user is not found\n     */\n    async validate(payload: any): Promise {\n        const user = await this.usersService.findUserById(payload.sub);\n        if (user) {\n            return user;\n        }\n\n        throw new UnauthorizedException();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/passport/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/passport/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/passport/local.strategy.ts:20\n                \n            \n\n\n            \n                \n                    Returns user that matches provided credentials.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User email address\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, HttpStatus } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n    constructor(private readonly authService: AuthService) {\n        super({\n                usernameField: 'email',\n        });\n    }\n\n    /**\n     * Returns user that matches provided credentials.\n     * @param email User email address\n     * @param password User password\n     * @throws {UnauthorizedException} if user is not found\n     */\n    async validate(email: string, password: string): Promise {\n        const user = await this.authService.validateUser(email, password);\n        if (!user) {\n            throw new UnauthorizedException();\n        }\n        return user;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockMongooseService.html":{"url":"injectables/MockMongooseService.html","title":"injectable - MockMongooseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MockMongooseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/mocks/mock-mongoose-service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                db\n                            \n                            \n                                    Private\n                                    Readonly\n                                DB_NAME\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMongooseOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in test/mocks/mock-mongoose-service.ts:9\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createMongooseOptions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createMongooseOptions()\n                \n            \n\n\n            \n                \n                    Defined in test/mocks/mock-mongoose-service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            db\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     MongoMemoryServer\n\n                        \n                    \n                        \n                            \n                                    Defined in test/mocks/mock-mongoose-service.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            DB_NAME\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'task-manager-api-test'\n                        \n                    \n                        \n                            \n                                    Defined in test/mocks/mock-mongoose-service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { MongooseOptionsFactory, MongooseModuleOptions } from '@nestjs/mongoose';\nimport { MongoMemoryServer } from 'mongodb-memory-server';\n\n@Injectable()\nexport class MockMongooseService implements MongooseOptionsFactory {\n\n    private readonly DB_NAME = 'task-manager-api-test';\n    private readonly db: MongoMemoryServer;\n\n    constructor() {\n        this.db = new MongoMemoryServer();\n    }\n\n    async createMongooseOptions(): Promise {\n        return await this.db.getUri(this.DB_NAME).then(uri => {\n            return {\n                uri,\n                useNewUrlParser: true,\n                useCreateIndex: true,\n                useFindAndModify: false,\n                useUnifiedTopology: true,\n            };\n        }).catch(() => {\n            throw new InternalServerErrorException();\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MongoExceptionFilter.html":{"url":"classes/MongoExceptionFilter.html","title":"class - MongoExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MongoExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mongo-exception-filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: MongoError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/mongo-exception-filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            MongoError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExceptionFilter, Catch, ArgumentsHost, InternalServerErrorException } from '@nestjs/common';\nimport { MongoError } from 'mongodb';\n\n@Catch(MongoError)\nexport class MongoExceptionFilter implements ExceptionFilter {\n    catch(exception: MongoError, host: ArgumentsHost) {\n        throw new InternalServerErrorException();\n    }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Task.html":{"url":"interfaces/Task.html","title":"interface - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/interfaces/task.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        completed\n                                \n                                \n                                        description\n                                \n                                \n                                        owner\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        completed\n                                    \n                                \n                                \n                                    \n                                        completed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        owner\n                                    \n                                \n                                \n                                    \n                                        owner:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\nexport interface Task extends Document {\n    readonly owner: string;\n    readonly description: string;\n    readonly completed: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskQueryOptions.html":{"url":"classes/TaskQueryOptions.html","title":"class - TaskQueryOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskQueryOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/classes/task-query-options.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    Readonly\n                                    Optional\n                                skip\n                            \n                            \n                                    Readonly\n                                    Optional\n                                sort\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsInt()@IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/classes/task-query-options.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            skip\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsInt()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/classes/task-query-options.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            sort\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskSortOption[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/classes/task-query-options.ts:14\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsBoolean, IsInt, IsPositive } from 'class-validator';\nimport { TaskSortOption } from './task-sort-option';\n\nexport class TaskQueryOptions {\n    @IsOptional()\n    @IsInt()\n    @IsPositive()\n    readonly limit?: number;\n\n    @IsOptional()\n    @IsInt()\n    readonly skip?: number;\n\n    readonly sort?: TaskSortOption[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskSortOption.html":{"url":"classes/TaskSortOption.html","title":"class - TaskSortOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskSortOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/classes/task-sort-option.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _direction\n                            \n                            \n                                    Private\n                                _field\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    field\n                                \n                                \n                                    direction\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(field: string, direction: string)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/classes/task-sort-option.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        field\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        direction\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _direction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/classes/task-sort-option.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _field\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/classes/task-sort-option.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n\n                \n                    \n                        getfield()\n                    \n                \n                            \n                                \n                                    Defined in src/tasks/classes/task-sort-option.ts:15\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        direction\n                    \n                \n\n                \n                    \n                        getdirection()\n                    \n                \n                            \n                                \n                                    Defined in src/tasks/classes/task-sort-option.ts:19\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { IsIn } from 'class-validator';\n\nexport class TaskSortOption {\n    @IsIn(['completed', 'createdAt', 'updatedAt', 'description'])\n    private _field: string;\n\n    @IsIn([1, -1])\n    private _direction: number;\n\n    constructor(field: string, direction: string) {\n        this._field = field;\n        this._direction = (direction.toLowerCase() === 'desc') ? -1 : 1;\n    }\n\n    get field(): string {\n        return this._field;\n    }\n\n    get direction(): number {\n        return this._direction;\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                deleteAllUserTasks\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                findAllTasks\n                            \n                            \n                                    Async\n                                findTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(req, createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:21\n                \n            \n\n\n            \n                \n                    Creates a task for logged-in user and returns task in\nresponse\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Task to be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAllUserTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllUserTasks(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:83\n                \n            \n\n\n            \n                \n                    Deletes all tasks belonging to currently logged-in user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:72\n                \n            \n\n\n            \n                \n                    Deletes a task belonging to currently logged-in user. Deleted\ntask is returned in the response.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasks(req, completed: boolean, taskQueryOptions?: TaskQueryOptions)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:44\n                \n            \n\n\n            \n                \n                    Finds and returns all tasks owned by logged-in user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    completed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Filter tasks by completion status\n\n                                    \n                                \n                                \n                                    taskQueryOptions\n                                    \n                                                TaskQueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional search criteria for task fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTask(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:32\n                \n            \n\n\n            \n                \n                    Finds a task by id belonging to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(req, id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:58\n                \n            \n\n\n            \n                \n                    Updates and returns a task belonging to logged-in user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to update\n\n                                    \n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Task fields to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Post, Body, Req, Get, Param, Query, Patch, Delete } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { TasksService } from './tasks.service';\nimport { TaskQueryOptions } from './classes/task-query-options';\nimport { UpdateTaskDto } from './dto/update-task.dto';\n\n@UseGuards(AuthGuard())\n@Controller('tasks')\nexport class TasksController {\n\n    constructor(private readonly tasksService: TasksService) {}\n\n    /**\n     * Creates a task for logged-in user and returns task in\n     * response\n     * @param req Request object\n     * @param {CreateTaskDto} createTaskDto Task to be created\n     */\n    @Post()\n    async createTask(@Req() req, @Body() createTaskDto: CreateTaskDto) {\n        createTaskDto.owner = req.user._id;\n        return await this.tasksService.create(createTaskDto);\n    }\n\n    /**\n     * Finds a task by id belonging to user\n     * @param req Request object\n     * @param id Id of task to find\n     */\n    @Get(':id')\n    async findTask(@Req() req, @Param('id') id: string) {\n        const task = await this.tasksService.findTask(req.user._id, id);\n        return task;\n    }\n\n    /**\n     * Finds and returns all tasks owned by logged-in user\n     * @param req Request object\n     * @param completed Filter tasks by completion status\n     * @param taskQueryOptions Optional search criteria for task fields\n     */\n    @Get()\n    async findAllTasks(\n        @Req() req,\n        @Query('completed') completed: boolean,\n        @Body() taskQueryOptions?: TaskQueryOptions) {\n        return await this.tasksService.findAllTasksByUserId(req.user._id, completed, taskQueryOptions);\n    }\n\n    /**\n     * Updates and returns a task belonging to logged-in user\n     * @param req Request object\n     * @param id Id of task to update\n     * @param {UpdateTaskDto} updateTaskDto Task fields to update\n     */\n    @Patch(':id')\n    async updateTask(\n        @Req() req,\n        @Param('id') id: string,\n        @Body() updateTaskDto: UpdateTaskDto) {\n        return await this.tasksService.updateTask(req.user._id, id, updateTaskDto);\n    }\n\n    /**\n     * Deletes a task belonging to currently logged-in user. Deleted\n     * task is returned in the response.\n     * @param req Request object\n     * @param id Id of task to delete\n     */\n    @Delete(':id')\n    async deleteTask(\n        @Req() req,\n        @Param('id') id: string) {\n        return await this.tasksService.deleteTask(req.user._id, id);\n    }\n\n    /**\n     * Deletes all tasks belonging to currently logged-in user\n     * @param req Request object\n     */\n    @Delete()\n    async deleteAllUserTasks(@Req() req) {\n        return await this.tasksService.deleteAllTasksByUserId(req.user._id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nTasksService\n\nTasksService\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PassportModule } from '@nestjs/passport';\nimport { TaskSchema } from './schemas/task.schema';\n\n@Module({\n  imports: [\n      MongooseModule.forFeature([\n          { name: 'Task', schema: TaskSchema },\n      ]),\n      PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  providers: [\n    TasksService,\n  ],\n  controllers: [TasksController],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteAllTasksByUserId\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                findAllTasksByUserId\n                            \n                            \n                                    Async\n                                findTask\n                            \n                            \n                                    Async\n                                updateTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:22\n                \n            \n\n\n            \n                \n                    Creates a new task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Task to be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAllTasksByUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllTasksByUserId(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:145\n                \n            \n\n\n            \n                \n                    Delete all tasks belonging to a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user that owns tasks\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(userId: string, taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:123\n                \n            \n\n\n            \n                \n                    Deletes a task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user that owns task\n\n                                    \n                                \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllTasksByUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllTasksByUserId(userId: string, completed: boolean, taskQueryOptions?: TaskQueryOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds all tasks for a user based on submitted\nsearch criteria\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user that owns tasks\n\n                                    \n                                \n                                \n                                    completed\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Filter tasks by completion status\n\n                                    \n                                \n                                \n                                    taskQueryOptions\n                                    \n                                                TaskQueryOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Task fields search criteria\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findTask(userId: string, taskId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:78\n                \n            \n\n\n            \n                \n                    Finds a task by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user that owns task\n\n                                    \n                                \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTask(userId: string, taskId: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:100\n                \n            \n\n\n            \n                \n                    Updates a task\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user that owns task\n\n                                    \n                                \n                                \n                                    taskId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of task to update\n\n                                    \n                                \n                                \n                                    updateTaskDto\n                                    \n                                                UpdateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Task fields to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('TasksService')\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/tasks.service.ts:12\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, BadRequestException, Logger, InternalServerErrorException } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Task } from './interfaces/task.interface';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { TaskQueryOptions } from './classes/task-query-options';\n\n@Injectable()\nexport class TasksService {\n\n    private logger = new Logger('TasksService');\n\n    constructor(\n        @InjectModel('Task') private readonly taskModel: Model) {}\n\n    /**\n     * Creates a new task\n     * @param {CreateTaskDto} createTaskDto Task to be created\n     * @throws {InternalServerErrorException} if an error occurs while creating task\n     */\n    async create(createTaskDto: CreateTaskDto): Promise {\n        try {\n            return await this.taskModel.create({\n                ...createTaskDto,\n            });\n        } catch (e) {\n            this.logger.error(\n                `Failed to create task for user id ${createTaskDto.owner}. DTO: ${JSON.stringify(createTaskDto)}`,\n                e.stack,\n                );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Finds all tasks for a user based on submitted\n     * search criteria\n     * @param userId Id of user that owns tasks\n     * @param completed Filter tasks by completion status\n     * @param taskQueryOptions Task fields search criteria\n     * @throws {InternalServerErrorException} if an error occurs while finding tasks\n     */\n    async findAllTasksByUserId(\n        userId: string,\n        completed: boolean,\n        taskQueryOptions?: TaskQueryOptions): Promise {\n\n        const conditions = {\n            owner: userId,\n            completed,\n        };\n\n        let options = null;\n        if (taskQueryOptions) {\n            options = {\n                ...taskQueryOptions,\n            };\n        }\n\n        try {\n            return await this.taskModel.find(conditions, null, options);\n        } catch (e) {\n            this.logger.error(\n                `Failed to find all tasks for user id ${userId}. Conditions: ${JSON.stringify(conditions)}, Options: ${JSON.stringify(options)}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Finds a task by id\n     * @param userId Id of user that owns task\n     * @param taskId Id of task to find\n     * @throws {InternalServerErrorException} if an error occurs while finding task\n     */\n    async findTask(userId: string, taskId: string): Promise {\n        try {\n            return await this.taskModel.findOne({\n                _id: taskId,\n                owner: userId,\n            });\n        } catch (e) {\n            this.logger.error(\n                `Failed to find task id ${taskId} for user id ${userId}.`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Updates a task\n     * @param userId Id of user that owns task\n     * @param taskId Id of task to update\n     * @param {UpdateTaskDto} updateTaskDto Task fields to update\n     * @throws {InternalServerErrorException} if an error occurs while updating task\n     */\n    async updateTask(userId: string, taskId: string, updateTaskDto: UpdateTaskDto): Promise {\n        const conditions =  {\n            owner: userId,\n            _id: taskId,\n        };\n\n        try {\n            return await this.taskModel.findOneAndUpdate(conditions, updateTaskDto, { new: true });\n        } catch (e) {\n            this.logger.error(\n                `Failed to update task id ${taskId} for user id ${userId}. DTO: ${JSON.stringify(updateTaskDto)}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Deletes a task\n     * @param userId Id of user that owns task\n     * @param taskId Id of task to delete\n     * @throws {InternalServerErrorException} if an error occurs while deleting task\n     */\n    async deleteTask(userId: string, taskId: string): Promise {\n        const conditions = {\n            owner: userId,\n            _id: taskId,\n        };\n\n        try {\n            return await this.taskModel.findOneAndDelete(conditions);\n        } catch (e) {\n            this.logger.error(\n                `Failed to delete task id ${taskId} for user id ${userId}. Conditions: ${JSON.stringify(conditions)}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Delete all tasks belonging to a user\n     * @param userId Id of user that owns tasks\n     * @throws {InternalServerErrorException} if an error occurs while deleting tasks\n     */\n    async deleteAllTasksByUserId(userId: string) {\n        try {\n            return await this.taskModel.deleteMany({ owner: userId });\n        } catch (e) {\n            this.logger.error(\n                `Failed to delete all tasks for user id ${userId}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Token.html":{"url":"interfaces/Token.html","title":"interface - Token","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Token\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/token.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        _id\n                                \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Token {\n    readonly _id?: string;\n    readonly token: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                completed\n                            \n                            \n                                    Readonly\n                                    Optional\n                                description\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            completed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/update-task.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty({message: 'Description is required'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/update-task.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class UpdateTaskDto {\n    @IsOptional()\n    @IsNotEmpty({ message: 'Description is required' })\n    readonly description?: string;\n\n    @IsOptional()\n    readonly completed?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                avatar\n                            \n                            \n                                    Readonly\n                                    Optional\n                                email\n                            \n                            \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    Readonly\n                                    Optional\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Buffer\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsLowercase()@IsEmail({}, {message: 'Must be a valid email address'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty({message: 'User name is required'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty({message: 'Password is required '})@MinLength(7, {message: 'Password must be at least 7 characters'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength, IsEmail, IsLowercase, IsOptional } from 'class-validator';\n\nexport class UpdateUserDto {\n    @IsOptional()\n    @IsNotEmpty({ message: 'User name is required' })\n    readonly name?: string;\n\n    @IsOptional()\n    @IsNotEmpty({ message: 'Password is required '})\n    @MinLength(7, { message: 'Password must be at least 7 characters' })\n    readonly password?: string;\n\n    @IsOptional()\n    @IsLowercase()\n    @IsEmail({}, { message: 'Must be a valid email address' })\n    readonly email?: string;\n\n    readonly avatar?: Buffer;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        avatar\n                                \n                                \n                                        createdAt\n                                \n                                \n                                        email\n                                \n                                \n                                        name\n                                \n                                \n                                        password\n                                \n                                \n                                        tokens\n                                \n                                \n                                        updatedAt\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        avatar\n                                    \n                                \n                                \n                                    \n                                        avatar:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                    \n                                \n                                \n                                    \n                                        createdAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tokens\n                                    \n                                \n                                \n                                    \n                                        tokens:         Token[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Token[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                    \n                                \n                                \n                                    \n                                        updatedAt:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\nimport { Token } from './token.interface';\n\nexport interface User extends Document {\n    readonly name: string;\n    readonly password: string;\n    readonly email: string;\n    readonly avatar: Buffer;\n    readonly tokens: Token[];\n    readonly createdAt: Date;\n    readonly updatedAt: Date;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                saveAvatar\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('me/avatar')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:89\n                \n            \n\n\n            \n                \n                    Deletes logged-in user avatar\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n                    Deletes logged-in user from the database and returns the profile\nof the deleted user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:42\n                \n            \n\n\n            \n                \n                    Returns user profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            saveAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveAvatar(req, avatar)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('me/avatar')@HttpCode(200)@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n                    Saves user avatar to database and then returns user profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    avatar\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Uploaded avatar file\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:32\n                \n            \n\n\n            \n                \n                    Creates a new user in the database and then returns the user profile.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(req, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('me')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:52\n                \n            \n\n\n            \n                \n                    Updates user then returns updated user profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Request object\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User fields to update\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, UseGuards, Request, Patch, Delete, UseInterceptors, UploadedFile, HttpCode, BadRequestException } from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UsersService } from './users.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@UseGuards(AuthGuard())\n@Controller('users')\nexport class UsersController {\n\n    private multerOptions = {\n        limits: {\n            fileSize: 1000000,\n        },\n        fileFilter(req, file, cb) {\n            if (!file.originalname.match(/\\.(jpg|png|jpeg)$/)) {\n               return cb(new Error('Avatar image must be of the type .jpg, .jpeg or .png'));\n            }\n\n            cb(undefined, true);\n        },\n    };\n\n    constructor(private readonly usersService: UsersService) {}\n\n    /**\n     * Creates a new user in the database and then returns the user profile.\n     * @param {CreateUserDto} createUserDto User to be created\n     */\n    @Post('signup')\n    async signup(@Body() createUserDto: CreateUserDto) {\n        // TODO: Restrict to admin-level account\n        return await this.usersService.create(createUserDto);\n    }\n\n    /**\n     * Returns user profile\n     * @param req Request object\n     */\n    @Get('me')\n    async findUserById(@Request() req) {\n        return req.user;\n    }\n\n    /**\n     * Updates user then returns updated user profile\n     * @param req Request object\n     * @param {UpdateUserDto} updateUserDto User fields to update\n     */\n    @Patch('me')\n    async updateUser(@Request() req, @Body() updateUserDto: UpdateUserDto) {\n        return await this.usersService.updateUser(req.user._id, updateUserDto);\n    }\n\n    /**\n     * Deletes logged-in user from the database and returns the profile\n     * of the deleted user\n     * @param req Request object\n     */\n    @Delete('me')\n    async deleteUser(@Request() req) {\n        return await this.usersService.deleteUser(req.user._id);\n    }\n\n    /**\n     * Saves user avatar to database and then returns user profile\n     * @param req Request object\n     * @param avatar Uploaded avatar file\n     * @throws {BadRequestException} if avatar is missing from request\n     */\n    @Post('me/avatar')\n    @HttpCode(200)\n    @UseInterceptors(FileInterceptor('avatar', this.multerOptions))\n    async saveAvatar(\n        @Request() req,\n        @UploadedFile() avatar) {\n        if (!avatar || !avatar.buffer) {\n            throw new BadRequestException('Missing Avatar Image');\n        }\n        return this.usersService.addAvatar(req.user._id, avatar.buffer);\n    }\n\n    /**\n     * Deletes logged-in user avatar\n     * @param req Request object\n     */\n    @Delete('me/avatar')\n    async deleteAvatar(@Request() req) {\n        return this.usersService.deleteAvatarByUserId(req.user._id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nTasksModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            TasksModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { UserSchema } from './schemas/user.schema';\nimport { PassportModule } from '@nestjs/passport';\nimport { TasksModule } from '../tasks/tasks.module';\n\n@Module({\n    imports: [\n        MongooseModule.forFeature([\n            { name: 'User', schema: UserSchema },\n        ]),\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        TasksModule,\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addToken\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteAvatarByUserId\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                removeToken\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addAvatar\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: string, file: Buffer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:179\n                \n            \n\n\n            \n                \n                    Resizes avatar image before saving it to user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user to save avatar to\n\n                                    \n                                \n                                \n                                    file\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Avatar image\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addToken(user: User, newToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:114\n                \n            \n\n\n            \n                \n                    Saves authentication token to list of user-owned tokens\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to save token to\n\n                                    \n                                \n                                \n                                    newToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Authentication token (JWT) to save\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:24\n                \n            \n\n\n            \n                \n                    Creates a new user in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to be created\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAvatarByUserId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatarByUserId(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:215\n                \n            \n\n\n            \n                \n                    Deletes user avatar\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user to delete avatar from\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:96\n                \n            \n\n\n            \n                \n                    Deletes a user by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user to be deleted\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n                    Finds user by email address\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Email to search for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds user by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id to search for\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:159\n                \n            \n\n\n            \n                \n                    Takes password string and returns a hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password to be hashed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeToken\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeToken(user: User, tokenToRemove: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:137\n                \n            \n\n\n            \n                \n                    Deletes authentication token from list of user-owned tokens\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User to remove token from\n\n                                    \n                                \n                                \n                                    tokenToRemove\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Authentication token being removed\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:79\n                \n            \n\n\n            \n                \n                    Updates user fields\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id of user being updated\n\n                                    \n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object containing updated fields\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('UsersService')\n                        \n                    \n                        \n                            \n                                    Defined in src/users/users.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException, BadRequestException, Logger } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User } from './interfaces/user.interface';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport * as bcrypt from 'bcrypt';\nimport { Token } from './interfaces/token.interface';\nimport * as sharp from 'sharp';\n\n@Injectable()\nexport class UsersService {\n\n    private logger = new Logger('UsersService');\n\n    constructor(\n        @InjectModel('User') private readonly userModel: Model) {}\n\n    /**\n     * Creates a new user in the database\n     * @param {CreateUserDto} createUserDto User to be created\n     * @throws {InternalServerErrorException} if an error occurs while saving user\n     */\n    async create(createUserDto: CreateUserDto): Promise {\n        const password = await this.hashPassword(createUserDto.password);\n        try {\n            return await this.userModel.create({\n                ...createUserDto,\n                password,\n            });\n        } catch (e) {\n            this.logger.error(\n                `Failed to create user. DTO: ${JSON.stringify(createUserDto)}`,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Finds user by id\n     * @param userId Id to search for\n     * @throws {InternalServerErrorException} if an error occurs while finding user\n     */\n    async findUserById(userId: string): Promise {\n        try {\n            return await this.userModel.findById(userId);\n        } catch (e) {\n            this.logger.error(\n                `Failed to find user by id ${userId}.`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Finds user by email address\n     * @param email Email to search for\n     * @throws {InternalServerErrorException} if an error occurs while finding user\n     */\n    async findUserByEmail(email: string): Promise {\n        try {\n            return await this.userModel.findOne({ email });\n        } catch (e) {\n            this.logger.error(\n                `Failed to find user by email ${email}.`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Updates user fields\n     * @param userId Id of user being updated\n     * @param {UpdateUserDto} updateUserDto Object containing updated fields\n     * @throws {InternalServerErrorException} if an error occurs during update\n     */\n    async updateUser(userId: string, updateUserDto: UpdateUserDto): Promise {\n        try {\n            return await this.userModel.findByIdAndUpdate(userId, updateUserDto, { new: true });\n        } catch (e) {\n            this.logger.error(\n                `Failed to update user. User Id ${userId}, DTO: ${JSON.stringify(updateUserDto)}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n    // TODO: Test cascade deletion of tasks owned by user\n    /**\n     * Deletes a user by id\n     * @param userId Id of user to be deleted\n     * @throws {InternalServerErrorException} if an error occurs during deletion\n     */\n    async deleteUser(userId: string): Promise {\n        try {\n            return await this.userModel.findByIdAndDelete(userId);\n        } catch (e) {\n            this.logger.error(\n                `Failed to delete user for id ${userId}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Saves authentication token to list of user-owned tokens\n     * @param user User to save token to\n     * @param newToken Authentication token (JWT) to save\n     * @throws {InternalServerErrorException} if an error occurs while updating user\n     */\n    async addToken(user: User, newToken: string): Promise {\n        const userTokens: Token[] = (user.tokens === undefined) ? [] : user.tokens;\n        userTokens.push({ token: newToken });\n\n        try {\n            return await this.userModel.findByIdAndUpdate(user._id, { tokens: userTokens }, { new: true });\n        } catch (e) {\n            this.logger.error(\n                `Failed to save token to user. User: ${JSON.stringify(user)},\n                 New Auth Token: ${newToken}, User Tokens: ${JSON.stringify(userTokens)}`,\n                 e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Deletes authentication token from list of user-owned tokens\n     * @param user User to remove token from\n     * @param tokenToRemove Authentication token being removed\n     * @throws {BadRequestException} if list of user tokens is undefined (User has no tokens)\n     * @throws {InternalServerErrorException} if an error occurs while updating user\n     */\n    async removeToken(user: User, tokenToRemove: string): Promise {\n        if (user.tokens === undefined) {\n            throw new BadRequestException('User is already logged out');\n        }\n\n        const userTokens: Token[] = user.tokens.filter(token => token.token !== tokenToRemove);\n        try {\n            return await this.userModel.findByIdAndUpdate(user._id, { tokens: userTokens }, { new: true });\n        } catch (e) {\n            this.logger.error(\n                `Failed to remove token from user. User: ${JSON.stringify(user)}, Auth Token: ${tokenToRemove}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Takes password string and returns a hash\n     * @param password Password to be hashed\n     * @throws {InternalServerErrorException} if an error occurs while hashing password\n     */\n    async hashPassword(password: string): Promise {\n        try {\n            return await bcrypt.hash(password, 8);\n        } catch (e) {\n            this.logger.error(\n                `Failed to hash password.`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Resizes avatar image before saving it to user\n     * @param userId Id of user to save avatar to\n     * @param {Buffer} file Avatar image\n     * @throws {BadRequestException} if file is empty\n     * @throws {InternalServerErrorException} if an error occurs while resizing image\n     * @throws {InternalServerErrorException} if an error occurs while saving image\n     */\n    async addAvatar(userId: string, file: Buffer): Promise {\n        if (!file) {\n            throw new BadRequestException('Missing avatar image');\n        }\n\n        let avatar: Buffer;\n        try {\n            avatar = await sharp(file)\n            .resize({ width: 250, height: 250 })\n            .png()\n            .toBuffer();\n        } catch (e) {\n            this.logger.error(`Failed to resize avatar image.`);\n            throw new InternalServerErrorException();\n        }\n\n        const updateUserDto: UpdateUserDto = {\n            avatar,\n        };\n\n        try {\n            return await this.updateUser(userId, updateUserDto);\n        } catch (e) {\n            this.logger.error(\n                `Failed to save avatar image for user id ${userId}.`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n\n    /**\n     * Deletes user avatar\n     * @param userId Id of user to delete avatar from\n     * @throws {InternalServerErrorException} if an error occurs while deleting image\n     */\n    async deleteAvatarByUserId(userId: string): Promise {\n        const updateUserDto: UpdateUserDto = {\n            avatar: undefined,\n        };\n        try {\n            return await this.updateUser(userId, updateUserDto);\n        } catch (e) {\n            this.logger.error(\n                `Failed to delete avatar for user id ${userId}`,\n                e.stack,\n            );\n            throw new InternalServerErrorException();\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                50 %\n                (3/6)\n            \n        \n        \n            \n                \n                src/auth/passport/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/passport/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mongo-exception-filter.ts\n            \n            class\n            MongoExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/classes/task-query-options.ts\n            \n            class\n            TaskQueryOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/classes/task-sort-option.ts\n            \n            class\n            TaskSortOption\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/interfaces/task.interface.ts\n            \n            interface\n            Task\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/schemas/task.schema.ts\n            \n            variable\n            TaskSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/interfaces/token.interface.ts\n            \n            interface\n            Token\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                test/mocks/mock-mongoose-service.ts\n            \n            injectable\n            MockMongooseService\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.11.6\n        \n            @nestjs/config : 0.0.7\n        \n            @nestjs/core : ^6.11.6\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/mongoose : ^6.3.1\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.11.6\n        \n            bcrypt : ^3.0.8\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            config : ^3.2.5\n        \n            express-rate-limit : ^5.1.1\n        \n            helmet : ^3.21.3\n        \n            mongoose : ^5.8.11\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            sharp : ^0.24.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nTasksModule->UsersModule\n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskSchema   (src/.../task.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tasks/schemas/task.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    owner: {\n        type: mongoose.Schema.Types.ObjectId,\n        required: true,\n        ref: 'User',\n    },\n    description: {\n        type: String,\n        required: true,\n        trim: true,\n    },\n    completed: {\n        type: Boolean,\n        default: false,\n    },\n}, {\n    timestamps: true,\n})\n                        \n                    \n\n\n            \n        \n\n    src/users/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    name: {\n        type: String,\n        trim: true,\n    },\n    password: {\n        type: String,\n        trim: true,\n    },\n    email: {\n        unique: true,\n        type: String,\n        trim: true,\n    },\n    avatar: {\n        type: Buffer,\n    },\n    tokens: [{\n        token: {\n            type: String,\n            required: true,\n        },\n    }],\n}, {\n    timestamps: true,\n}).method('toJSON', function() {\n    // Remove sensitive fields\n    const user = this.toObject();\n    delete user.password;\n    delete user.tokens;\n    delete user.avatar;\n\n    return user;\n})\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
